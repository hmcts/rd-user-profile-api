#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl

def type = "java"
def product = "rd"
def component = "user-profile-api"

def secrets = [
    's2s-${env}': [
        secret('microservicekey-rd-user-profile-api', 'USER_PROFILE_API_S2S_SECRET')
    ],
    'rd-${env}': [
            secret('OAUTH2-CLIENT-SECRET', 'OAUTH2_CLIENT_SECRET'),
            secret('OAUTH2-CLIENT-AUTH', 'OAUTH2_CLIENT_AUTH'),
            secret('OAUTH2-CLIENT-ID', 'OAUTH2_CLIENT_ID'),
            secret('LD-SDK-KEY', 'LD_SDK_KEY')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

def vaultOverrides = [
    'preview' : 'aat',
    'spreview': 'saat'
]

// Configure branches to sync with master branch
def branchesToSync = ['demo', 'ithc', 'perftest']

// Vars for Kubernetes PACT
env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'
env.PACT_BROKER_URL = "pact-broker.platform.hmcts.net"
env.PACT_BROKER_PORT = "443"
env.PACT_BROKER_SCHEME = "https"

withPipeline(type, product, component) {
    env.S2S_URL_TO_TEST = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.IDAM_URL_TO_TEST = "https://idam-api.aat.platform.hmcts.net"
    env.TEST_URL = "http://rd-user-profile-api-aat.service.core-compute-aat.internal"

    overrideVaultEnvironments(vaultOverrides)
    loadVaultSecrets(secrets)
    enableDbMigration('rd')
    disableLegacyDeployment()
    enableAksStagingDeployment()

    // Sync environment specific branches with master branch
    syncBranchesWithMaster(branchesToSync)

    before('functionalTest:preview') {
        env.execution_environment = "preview"
        env.LAUNCH_DARKLY_ENV = "preview"
        env.ENVIRONMENT_NAME  = "preview"
        env.TEST_URL = "http://rd-user-profile-api-preview.preview.hmcts.platform.net"
    }

    before('functionalTest:aat') {
        env.execution_environment = "aat"
        env.LAUNCH_DARKLY_ENV = "aat"
        env.ENVIRONMENT_NAME  = "aat"
        env.TEST_URL = "http://rd-user-profile-api-aat.aat.hmcts.platform.net"
    }

    before('smoketest:preview') {
        env.execution_environment = "preview"
        env.LAUNCH_DARKLY_ENV = "preview"
        env.ENVIRONMENT_NAME  = "preview"
        env.TEST_URL = "http://rd-user-profile-api-preview.preview.platform.hmcts.net"
    }

    before('smoketest:aat') {
        env.execution_environment = "aat"
        env.LAUNCH_DARKLY_ENV = "aat"
        env.ENVIRONMENT_NAME  = "aat"
        env.TEST_URL = "http://rd-user-profile-api-aat.aat.platform.hmcts.net"
    }

    afterSuccess('sonarscan') {

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/test",
            reportFiles          : "index.html",
            reportName           : "Unit Tests Report"
        ]

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/integration",
            reportFiles          : "index.html",
            reportName           : "Integration Test Report"
        ]
    }

    afterSuccess('smoketest:preview') {
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/smoke",
            reportFiles          : "index.html",
            reportName           : "Smoke Test Report"
        ]
    }

    afterSuccess('smoketest:aat') {
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/smoke",
            reportFiles          : "index.html",
            reportName           : "Smoke Test Report"
        ]
    }

    afterSuccess('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "target/site/serenity/",
            reportFiles          : "index.html",
            reportName           : "Functional Tests Report"
        ]
    }

    afterSuccess('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "target/site/serenity/",
            reportFiles          : "index.html",
            reportName           : "Functional Tests Report"
        ]
    }

    afterSuccess('pact-provider-verification') {
        publishHTML target: [
             allowMissing         : true,
             alwaysLinkToLastBuild: true,
             keepAll              : true,
            reportDir            : "build/reports/tests/runProviderPactVerification",
            reportFiles          : "index.html",
            reportName           : "Contract Tests Report"
        ]
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/**/*'
    }

    onMaster() {
        enablePactAs([AppPipelineDsl.PactRoles.PROVIDER])
    }
    onPR() {
        enablePactAs([AppPipelineDsl.PactRoles.PROVIDER])

    }
}
