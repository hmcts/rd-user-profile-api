buildscript {
    dependencies {
        classpath "org.flywaydb:flyway-database-postgresql:11.14.0"
    }
}

plugins {
    id 'application'
    id 'uk.gov.hmcts.java' version '0.12.67'
    id 'idea'
    id 'jacoco'
    id 'pmd'
    id 'project-report'
    id 'com.github.ben-manes.versions' version '0.53.0'
    id "info.solidsoft.pitest" version '1.15.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.sonarqube' version '6.3.1.5724'
    id 'org.springframework.boot' version '3.3.7'
    id "org.flywaydb.flyway" version "11.14.0"
    id 'au.com.dius.pact' version '4.6.17'
    id 'org.owasp.dependencycheck' version '12.1.6'
    id 'net.serenity-bdd.serenity-gradle-plugin' version '4.2.34'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

ext {
    springCloudVersion = '2023.0.6'
}

def versions = [
        junit              : '6.0.0',
        junitPlatform      : '6.0.0',
        junitPitest        : '1.2.1',
        lombok             : '1.18.42',
        flywaydb           : '11.14.0',
        sonarPitest        : '0.5',
        reformLogging      : '6.1.9',
        serenity           : '4.2.34',
        pact_version       : '4.6.17',
        launchDarklySdk    : '5.10.9',
        log4j              : '2.25.2',
        jackson            : '2.20.0',
        feign              : '3.8.0',
        reformS2sClient    : '5.3.3',
        testContainer_postgresql: '1.21.3',
        bouncycastle       : '1.82',
        logback            : '1.5.12',
        okio               : '3.4.0'
]

application {
    mainClass = 'uk.gov.hmcts.reform.userprofileapi.Application'

    // this is required to force Java running on the Azure Windows Server OS into using
    // UTF-8 as the default character set instead of windows-1252 which causes issues.
    // this setting only applies when running via gradle bootRun -- see web.config for the
    // java flag that configures the deployed applications
    applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]
}

def jarName = 'rd-user-profile-api.jar'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.75
            }
        }
    }
}

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation' << "-Xlint:unchecked" << "-Werror"
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation' << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

sourceSets {

    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }

    functionalTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }

    smokeTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }

    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }
    pactTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/pactTest/java')
        }
        resources.srcDir file('src/pactTest/resources')
    }
}

idea {
    module {
        testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
        testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
        testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
        testSourceDirs += project.sourceSets.functionalTest.resources.srcDirs
        testSourceDirs += project.sourceSets.smokeTest.java.srcDirs
        testSourceDirs += project.sourceSets.smokeTest.resources.srcDirs
    }
}


configurations {
    integrationTestImplementation.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    functionalTestImplementation.extendsFrom testCompile
    functionalTestRuntimeOnly.extendsFrom testRuntime
    contractTestImplementation.extendsFrom testCompile
    contractTestRuntimeOnly.extendsFrom testRuntime
    pactTestImplementation.extendsFrom testCompile
    pactTestRuntime.extendsFrom testRuntime
    testCompile.exclude group: 'ch.qos.logback', module: 'logback-classic'
    testCompile.exclude group: 'ch.qos.logback', module: 'logback-core'
    compile.exclude group: 'ch.qos.logback', module: 'logback-classic'
    compile.exclude group: 'ch.qos.logback', module: 'logback-core'
}

pmd {
    toolVersion = "7.17.0"
    ignoreFailures = true
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest, sourceSets.functionalTest, sourceSets.smokeTest]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSets = [
            'category/java/errorprone.xml',
            'category/java/bestpractices.xml'
    ]
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {

    systemProperty "scenario", System.getProperty('scenario')

    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    finalizedBy aggregate
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
    finalizedBy aggregate
    //maxParallelForks = (Runtime.runtime.availableProcessors().intdiv(2) >= 2)  ? 2 : 1
}

task migratePostgresDatabase(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    baselineOnMigrate = true
    if (project.hasProperty("dburl")) {
        url = "jdbc:postgresql://${dburl}"
    }
}
//PACT CONFIGURATION
project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

task contract(type: Test) {
    description = 'Runs the consumer Pact tests'
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    include "uk/gov/hmcts/reform/userprofileapi/**"
}

task runAndPublishConsumerPactTests(type: Test, description: 'Publish pact test to broker.', group: 'Verification') {
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
}

runAndPublishConsumerPactTests.finalizedBy pactPublish

pact {
    publish {
        pactDirectory = 'pacts'
        tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
        version = project.pactVersion
    }
}

//Provider PACT tasks
task contractTest(type: Test) {
    logger.lifecycle("Runnning contract Tests")
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    exclude "uk/gov/hmcts/reform/userprofileapi/*IdamConsumerTest*"
}

task runProviderPactVerification(type: Test) {
    description = 'Runs the provider Pact tests'
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    if (project.hasProperty('pact.verifier.publishResults')) {
        systemProperty 'pact.verifier.publishResults', project.property('pact.verifier.publishResults')
    }
    systemProperty 'pact.provider.version', project.pactVersion
    include "uk/gov/hmcts/reform/userprofileapi/**"
}

task fortifyScan(type: JavaExec)  {
  main("uk.gov.hmcts.fortifyclient.FortifyClientMainApp")
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
  // This is a temporary fix to prevent the nightly build from failing if the Fortify scan detects issues
  ignoreExitValue = true as JavaExecSpec
}

runProviderPactVerification.dependsOn contractTest

runProviderPactVerification.finalizedBy pactVerify

jacoco {
    toolVersion = "0.8.14"
}

jacocoTestReport {
    executionData(test, integration)
    reports {
        xml.required = true
        csv.required = false
        xml.outputLocation = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

pitest {
    junit5PluginVersion = versions.junitPitest
    targetClasses = ['uk.gov.hmcts.reform.userprofileapi.*']
    excludedClasses = [
            'uk.gov.hmcts.reform.userprofileapi.config.*',
            'uk.gov.hmcts.reform.userprofileapi.Application',
            'uk.gov.hmcts.reform.userprofileapi.controller.*'
    ]
    threads = 10
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 85
}

project.tasks['pitest'].group = "Verification"

sonarqube {
    properties {
        property "sonar.projectName", "RD :: User Profile API"
        property "sonar.projectKey", "RDUSERPROFILEAPI"
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation}"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
        property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/userprofileapi/config/**," +
                "src/main/java/uk/gov/hmcts/reform/userprofileapi/SystemDateProvider.java," +
                "src/main/java/uk/gov/hmcts/reform/userprofileapi/Application.java," +
                "src/main/java/uk/gov/hmcts/reform/userprofileapi/util/JsonFeignResponseHelper.java," +
                "src/main/java/uk/gov/hmcts/reform/userprofileapi/domain/**"
    }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport
project.tasks['sonarqube'].group = "Verification"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1' }
}

dependencies {

    configurations.all {
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
        exclude group: "org.codehaus.groovy", module: "groovy"
        exclude group: "org.codehaus.groovy", module: "groovy-xml"
        exclude group: "org.codehaus.groovy", module: "groovy-json"
    }

    implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: '3.1.1'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jetty'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation group: 'org.springframework.retry', name: 'spring-retry', version: '2.0.12'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.19.0'

    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.6.0'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap'
    implementation group: 'org.bouncycastle', name: 'bcpkix-jdk18on', version: versions.bouncycastle

    implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '3.2.2'

    implementation group: 'io.github.openfeign', name: 'feign-okhttp', version: '13.6'

    implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.reformS2sClient
    implementation group: 'com.auth0', name: 'java-jwt', version: '4.5.0'

    implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: versions.launchDarklySdk

    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    implementation group: 'com.fasterxml.jackson', name: 'jackson-bom', version: versions.jackson, ext: 'pom'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version:'0.9.1'
    implementation 'com.github.hmcts:idam-java-client:3.0.4'
    implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '10.5'

    implementation group: 'org.flywaydb', name: 'flyway-core', version: versions.flywaydb
    implementation group: 'org.flywaydb', name: 'flyway-database-postgresql', version: versions.flywaydb

    implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.8'
    implementation group: 'jakarta.el', name: 'jakarta.el-api', version: '6.0.1'
    implementation group: 'com.google.guava', name: 'guava', version: '33.5.0-jre'

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.log4j
    implementation group: 'org.apache.logging.log4j', name: 'log4j', version: versions.log4j
    implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.log4j
    implementation group: 'com.microsoft.azure', name: 'applicationinsights-core', version: '3.7.5'


    testImplementation group: 'org.testcontainers', name: 'postgresql', version: versions.testContainer_postgresql
    testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: versions.testContainer_postgresql
    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: versions.testContainer_postgresql

    testImplementation ("org.mockito:mockito-core:5.20.0") {
        exclude group: "net.bytebuddy", module: "byte-buddy"
        exclude group: "net.bytebuddy", module: "byte-buddy-agent"
    }
    testImplementation ("org.mockito:mockito-inline:5.2.0") {
        exclude group: "net.bytebuddy", module: "byte-buddy"
        exclude group: "net.bytebuddy", module: "byte-buddy-agent"
    }
    testImplementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.17.8'
    testImplementation group: 'net.bytebuddy', name: 'byte-buddy-agent', version: '1.17.8'

    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.20.0'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'

    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: versions.log4j
    implementation "com.github.hmcts.java-logging:logging:${versions.reformLogging}"
    implementation "com.github.hmcts.java-logging:logging-appinsights:${versions.reformLogging}"

    testImplementation 'com.github.hmcts:rd-commons-lib:0.1.2'

    compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    integrationTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    functionalTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    functionalTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    smokeTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    smokeTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok


    testImplementation("org.hamcrest:hamcrest-junit:2.0.0.0") {
        exclude group: "org.hamcrest", module: "hamcrest-core"
        exclude group: "org.hamcrest", module: "hamcrest-library"
    }

    testImplementation "com.github.tomakehurst:wiremock-jre8-standalone:3.0.1"

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.sonarPitest
    testImplementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '5.2.1'
    testImplementation group: 'com.github.mifmif', name: 'generex', version: '1.0.2'
    testImplementation 'com.github.hmcts:fortify-client:1.4.10:all'

    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: versions.pact_version

    testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: versions.junit

    functionalTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
    functionalTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
    functionalTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
    functionalTestImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
    functionalTestRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform

    smokeTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
    smokeTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
    smokeTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
    smokeTestImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
    smokeTestRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform

    integrationTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
    integrationTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
    integrationTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
    integrationTestImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
    integrationTestRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform

    contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
    contractTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
    contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
    contractTestImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
    contractTestRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform
    contractTestImplementation('org.scala-lang:scala-library:2.13.17')

    integrationTestImplementation sourceSets.main.runtimeClasspath
    integrationTestImplementation sourceSets.test.runtimeClasspath

    functionalTestImplementation sourceSets.main.runtimeClasspath
    functionalTestImplementation sourceSets.test.runtimeClasspath

    smokeTestImplementation sourceSets.main.runtimeClasspath
    smokeTestImplementation sourceSets.test.runtimeClasspath

    contractTestImplementation sourceSets.main.runtimeClasspath
    contractTestImplementation sourceSets.test.runtimeClasspath

    pactTestImplementation sourceSets.main.runtimeClasspath
    pactTestImplementation sourceSets.test.runtimeClasspath
}

rootProject.tasks.named("processFunctionalTestResources") {
    duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
    duplicatesStrategy = 'include'
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
// Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

gradle.startParameter.continueOnFailure = true

bootJar {
    loaderImplementation = org.springframework.boot.loader.tools.LoaderImplementation.CLASSIC
    archiveFileName = jarName
    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'org.bouncycastle'
                && (details.requested.name == 'bcpkix-jdk18on'
                || details.requested.name == 'bcprov-jdk18on')
        ){
            details.useVersion versions.bouncycastle
        }

        if (details.requested.group == 'com.squareup.okio'
            && details.requested.name == 'okio') {
            details.useVersion versions.okio
        }
    }


}

dependencies {
    modules {
        module("org.bouncycastle:bcpkix-jdk15on") {
            replacedBy("org.bouncycastle:bcpkix-jdk18on")
        }
        module("org.bouncycastle:bcprov-jdk15on") {
            replacedBy("org.bouncycastle:bcprov-jdk18on")
        }
    }
}
